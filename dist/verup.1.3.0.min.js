#!/usr/bin/env node
var path=require("path"),fs=require("fs"),ver_reg=[/^((?:\$|(\s*\*\s*@)|(\s*(?:var|,)?\s+))version[\s\:='"]+)([0-9]+(?:\.[0-9]+){2,2})/,/^(\s?\*.*v)([0-9]+(?:\.[0-9]+){2,2})/],bump="1",name="",_a="b";process.argv.forEach(function(a,c){if(!(2>c))if("-"==a.slice(0,1)&&isNaN(parseFloat(a)))_a=a.slice(1);else{switch(_a){case "b":bump=a;break;case "n":name=a}_a="b"}});var packFile=findPackage(__dirname,name);packFile||(console.log("package.json file not found"),process.exist(1));
var _root=path.dirname(packFile),packo=require(packFile);packo||(console.error("Can't read package.json file"),process.exit(1));var _verup=packo.verup;_verup||(console.log("package.json doesn't have a `verup` property defined"),process.exist(1));var files=_verup.files;_verup.regs&&(ver_reg=_verup.regs.map(function(a){return new RegExp(a)}));var over=packo.version;
if(over){for(var bump=bump.split(".").reverse(),nver=over.split(".").reverse(),b,l;bump.length&&!(b=parseInt(bump.pop())););l=bump.length;nver[l]=+nver[l]+b;bump.forEach(function(a,c){nver[c]=a});nver=nver.reverse().join(".");packo.version=nver;console.log("Bumping version: "+over+" -> "+nver);var buf=JSON.stringify(packo,null,2);buf&&over!=nver&&(buf+="\n",fs.writeFileSync(packFile,buf));files.forEach(function(a){var c=path.join(_root,a),d=fs.readFileSync(c,"utf8");switch(path.extname(a)){case ".json":a=
JSON.parse(d);a.version=nver;(a=JSON.stringify(a,null,2))&&(a+="\n");break;default:a=d.split("\n").map(function(a){for(var c=ver_reg.length;c--;)if(ver_reg[c].test(a))return a.replace(ver_reg[c],function(a,c){return c+nver});return a}).join("\n")}a&&a!=d&&(console.log("\t"+c.replace(_root,"").replace(/^[\\/]+/,"")),fs.writeFileSync(c,a))})}
function findPackage(a,c){var d=a||".",e;do{e=path.join(d,"package.json");if(fs.existsSync(e)){var f=require(e);if(c){if(f&&f.name==c)return e}else if(!f||"verup"!=f.name)return e}a=d;d=path.join(d,"..")}while(d!=a&&".."!=a.slice(0,2));return!1};